#!/usr/bin/env node
/**
 * final-test
 * A voice agent built with ElevenLabs and Cursor AI
 * 
 * Generated by eleven-cursor CLI
 * Created: 2025-10-08T12:07:50.344Z
 */

require('dotenv').config();
const { ElevenLabsClient } = require('elevenlabs');

// Initialize ElevenLabs client
const client = new ElevenLabsClient({
  apiKey: process.env.ELEVEN_API_KEY
});

// Voice configuration
const VOICE_CONFIG = {
  voiceId: 'EXAVITQu4vr4xnSDxMaL',
  settings: {
    stability: 0.75,
    similarity_boost: 0.75,
    style: 0.0,
    use_speaker_boost: true
  }
};

/**
 * Generate voice from text
 * @param {string} text - Text to synthesize
 * @param {string} outputPath - Output file path
 * @returns {Promise<void>}
 */
async function generateVoice(text, outputPath = 'output/voice.mp3') {
  try {
    console.log('üéß Generating voice...');
    console.log(`Text: "${text}"`);
    console.log(`Voice: ${VOICE_CONFIG.voiceId}`);
    
    const audio = await client.generate({
      voice: VOICE_CONFIG.voiceId,
      text: text,
      voice_settings: VOICE_CONFIG.settings
    });
    
    // Save audio to file
    const fs = require('fs');
    const path = require('path');
    
    // Ensure output directory exists
    const outputDir = path.dirname(outputPath);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    // Write audio buffer to file
    fs.writeFileSync(outputPath, audio);
    
    console.log(`‚úÖ Voice generated successfully: ${outputPath}`);
  } catch (error) {
    console.error('‚ùå Error generating voice:', error.message);
    process.exit(1);
  }
}

/**
 * Main function
 */
async function main() {
  console.log('üéß Voice Agent Started');
  console.log(`Project: ${process.env.npm_package_name || 'final-test'}`);
  
  // Example usage
  const sampleText = "Hello! This is your voice agent speaking. Welcome to the future of voice AI!";
  
  try {
    await generateVoice(sampleText);
    console.log('\nüéâ Voice agent is working correctly!');
  } catch (error) {
    console.error('\n‚ùå Voice agent failed:', error.message);
    process.exit(1);
  }
}

// Run main function if this file is executed directly
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  generateVoice,
  VOICE_CONFIG
};